<?php

/**
 * Tokenizer class
 *
 * @author Shimon Doodkin <helpmepro1@gmail.com>
 *
 */
 
 
 
/**
 * Tokenizer class. 
 * it extracts known texts by categories from an input text
 * 
 * 
 */

class Tokenizer
{

 /** 
  * Tokenizer constructor
  *
  * immediately after construction it uses the load() method to load settings specified by filename.
  *  
  * example json contents for settings file
  * suggested filename like: tokenizer-YourConfigNameHere.json
  *
  * <pre><code>
  * {
  *  "gender":[
  *  	"men",
  * 	"women"
  *  ],
  *  "pattern":[
  *   "polka dot"
  *  ],
  *  "brand":[
  * 	"gap",
  * 	"forever 21"
  *  ],
  *  "color":[
  * 	"aqua",
  * 	"candy pink"
  *  ]
  * }  
  * </code></pre>
  *
  * @param string $filename json settings filename to load from current directory. 
  *
  */
	public function Tokenizer($filename)
	{
		$this->load($filename);
	}
	
	/**
	* the resulted settings after loading and preparation.
	*
	* <pre><code>
	* $settings=array(
	*			"color"  => array(),
	*			"gender" => array(),
	*			"pattern"=> array(),
	*			"brand"  => array()
	*		)
	* </code></pre>
	*/
	public 	$settings=array(
								"color"  => array(),
								"gender" => array(),
								"pattern"=> array(),
								"brand"  => array()
							);
	/**
	* holds reg exp generated by load method
	*/
	private $colorsregexp="";
	
	/**
	* holds reg exp generated by load method
	*/
	private $patternregexp="";	
	
	/**
	* holds reg exp generated by load method
	*/
	private $brandregexp="";
	

 /**
  * load settings from json file
  *
  * The constructor immediately after construction it uses the load() method to load settings specified by filename.
  *  
  * suggested settings config filename is like: tokenizer-YourConfigNameHere.json
  * example json contents for settings file
  *
  * <pre><code>
  * {
  *  "gender":[
  *  	"men",
  * 	"women"
  *  ],
  *  "pattern":[
  *   "polka dot"
  *  ],
  *  "brand":[
  * 	"gap",
  * 	"forever 21"
  *  ],
  *  "color":[
  * 	"aqua",
  * 	"candy pink"
  *  ]
  * }  
  * </code></pre>
  *
  * @param string $filename json settings filename to load from current directory. 
  *
  */
	public function load($filename)
	{
		$json=file_get_contents (  $filename );
		$this->settings=json_decode($json, true);
		
		if(json_last_error()!=JSON_ERROR_NONE)
			throw new Exception('load json error: '.json_last_error_msg().". try http://jsonlint.com/ (paste there the contents of $filename) "); 

		// to lowercase there is no in array with lowercase
		$this->settings["color"]= array_map('strtolower', $this->settings["color"]);
		$this->settings["gender"]= array_map('strtolower', $this->settings["gender"]);
		$this->settings["pattern"]= array_map('strtolower', $this->settings["pattern"]);
		$this->settings["brand"]= array_map('strtolower', $this->settings["brand"]);
		
		//i have noticed there are colors like, rust red, and, red rust.
		
		//generate permutations for colors
		$ncolors=sizeof($this->settings["color"]);
		for($i=0;$i<$ncolors;$i++)
		{
			$color=$this->settings["color"][$i];
			$color_words=preg_split('/[^a-z0-9]/',$color);
			if(sizeof($color_words)>1)
			{
				//foreach ($this->permutations($color_words) as $permutation) // permutations take a lot of memory (nice try)
				//	$this->settings["color"][]=join(' ',$permutation);	
					
				foreach ($color_words as $color)// add single words helps tokenize_single_words function
					if(strlen($color)>2)$this->settings["color"][]=$color;	
			}
		}
		
		//generate permutations patterns
		$npatterns=sizeof($this->settings["pattern"]);
		for($i=0;$i<$npatterns;$i++)
		{
			$pattern=$this->settings["pattern"][$i];
			$pattern_words=preg_split('/[^a-z0-9]/',$pattern);
			if(sizeof($pattern_words)>1)
			{
				//foreach ($this->permutations($pattern_words) as $permutation) // permutations take a lot of memory 
				//	$this->settings["pattern"][]=join(' ',$permutation);	
					
				foreach ($pattern_words as $pattern)// add single words helps tokenize_single_words function
					if(strlen($pattern)>2)$this->settings["pattern"][]=$pattern;	
			}
		}
		
		//generate permutations brands
		$nbrands=sizeof($this->settings["brand"]);
		for($i=0;$i<$nbrands;$i++)
		{
			$brand=$this->settings["brand"][$i];
			$brand_words=preg_split('/[^a-z0-9]/',$brand);
			if(sizeof($brand_words)>1)
			{
				//foreach ($this->permutations($brand_words) as $permutation) // permutations take a lot of memory 
				//	$this->settings["brand"][]=join(' ',$permutation);	
					
				foreach ($brand_words as $brand)// add single words helps tokenize_single_words function
					if(strlen($brand)>2)$this->settings["brand"][]=$brand;	
			}
		}

		
		$this->settings["color"]=array_filter(array_reverse(array_unique($this->settings["color"])),function($a){return !empty(trim($a));});
		$this->settings["gender"]=array_filter(array_reverse(array_unique($this->settings["gender"])),function($a){return !empty(trim($a));});
		$this->settings["pattern"]=array_filter(array_reverse(array_unique($this->settings["pattern"])),function($a){return !empty(trim($a));});
		$this->settings["brand"]=array_filter(array_reverse(array_unique($this->settings["brand"])),function($a){return !empty(trim($a));});
		
		//sort  desc from longest to shortest to prevent shorter strings overcome longer patterns in reg exp
		usort($this->settings["color"],array($this,"lengthsort"));
		usort($this->settings["gender"],array($this,"lengthsort"));
		usort($this->settings["pattern"],array($this,"lengthsort"));
		usort($this->settings["brand"],array($this,"lengthsort"));
		
		//print_r($this->settings["color"]); // useful for debugging
		
		
		//prepere regular expressions
		
		$colors=join("|",  array_map("preg_quote", $this->settings["color"]   )  );
		$lemmacolor="(ish|)";
		$this->colorsregexp="/\\b(".$colors.")".$lemmacolor."\\b/i";
				
		$lemmapattern="(d|ed|)";
		
		$patterns=join("|", array_map("preg_quote", $this->settings["pattern"] )  );
		$this->patternregexp="/\\b(".$patterns.")".$lemmapattern."\\b/i";
		
		$this->brandregexp="/\\b(".join("|",   array_map("preg_quote", $this->settings["brand"]   )  ).")\\b/i";

	}

	// helper functions for tokenize_single_words
	
   /**
    * lemma color
	*
    * currently this function supports single inflection -ish
	* for colors like blueish
	*
	* @param string $input_text a color name with inflection
	*
	*/
	private function lemmacolor($input_text) {
		if($this->endsWith($input_text,"ish"))
			return substr($input_text,0,-3);
		return false;
	}

   /**
    * lemma pattern
	*
    * currently this function supports single inflection -d
	* for patterns like striped
	*
	* @param string $input_text a pattern name with inflection
	*
	*/
	private function lemmapattern($input_text) {
		if($this->endsWith($input_text,"d"))
			return substr($input_text,0,-1);
		return false;
	}

   /**
    * tokenize single words
	*
    * this function takes known words out of input text function parameter and saves them into result arrays and then returns the a result.
    * this is a simplified function that uses strtok and in_array to match for words found in arrays in settings property.
	*
	*	
	*	example return value from this function:
	*
	*   <pre><code>
	*	array(
	*		"status" => "success",
	*		"original" => "red dress",
	*		"keywords" => "dress",
	*		"properties" =>
	*		array(
	*			"color"  => array( "red" ),
	*			"gender" => array(),
	*			"pattern"=> array(),
	*			"brand"  => array()
	*		)
	*	);
	*  </code></pre>
	*
	* example:
	* <pre><code>
	*    include "tokenizer.class.php";
	*    $filename="tokenizer-gap.json";
	*    $tokenizer=new Tokenizer($filename);
	*    
	*    $query="red dress"
	*    $result=$tokenizer->tokenize_single_words($query); 
	*    
	*    echo $result["keywords"]."\n\n";
	*    var_dump($result["parameters"]["colors"]);
	* </code></pre>
	*
	* @param string $input_text several words separated by spaces to match for each of them.
	*
	*/
	public function tokenize_single_words($input_text) {
		
		if(empty($this->settings))
			throw new Exception('settings is empty, probably a json error');
		
		$text_without_properties="";
		
		$result =  array(
			"status" => "success",
			"original" => $input_text,
			"keywords" => $text_without_properties,
			"properties" =>
			array(
				"color"  => array(),
				"gender" => array(),
				"pattern"=> array(),
				"brand"  => array()
			)
		);
		
		$input_text2=strtolower($input_text);
		
		$word = strtok($input_text2, " ");
		while ($word !== false) {

			if(in_array (  $word ,$this->settings["color"], true ))
			{
				$result["properties"]["color"][]=$word;
			}
			else
			{
				$lemmacolor=$this->lemmacolor($word); // if not found try lemma
				if($lemmacolor!==false && in_array (  $lemmacolor  ,$this->settings["color"], true ))
					$result["properties"]["color"][]=$lemmacolor;
					
				else if(in_array (  $word ,$this->settings["gender"], true ))
					$result["properties"]["gender"][]=$word;				
					
				else if(in_array (  $word ,$this->settings["pattern"], true ))
					$result["properties"]["pattern"][]=$word;
				else
				{
				
					$lemmapattern=$this->lemmapattern($word); // if not found try lemma
					if(in_array (  $lemmapattern ,$this->settings["pattern"], true ))
						$result["properties"]["pattern"][]=$lemmapattern;
					else if(in_array (  $word ,$this->settings["brand"], true ))
						$result["properties"]["brand"][]=$word;
						
					else 
						$text_without_properties .=" ".$word;
				}
			}
			$word = strtok(" ");
		}
		$result["keywords"]=substr($text_without_properties,1);
		return $result;
	}


   /**
    * tokenize
	*
    * this function takes known words out of input text function parameter and saves them into result arrays and then returns the a result.
    * this is a more complex function that relies on regular expression searches to match for words found in arrays in settings property.
	*
	*	
	*	example return value from this function:
	*   <pre><code>
	*	array(
	*		"status" => "success",
	*		"original" => "red dress",
	*		"keywords" => "dress",
	*		"properties" =>
	*		array(
	*			"color"  => array( "red" ),
	*			"gender" => array(),
	*			"pattern"=> array(),
	*			"brand"  => array()
	*		)
	*	);
	*   </code></pre>
	*
	* example:
	*
	*    <pre><code>
	*    include "tokenizer.class.php";
	*    $filename="tokenizer-gap.json";
	*    $tokenizer=new Tokenizer($filename);
	*    
	*    $query="red dress"
	*    $result=$tokenizer->tokenize($query); 
	*    
	*    echo $result["keywords"]."\n\n";
	*    var_dump($result["parameters"]["colors"]);
	*    </code></pre>
	*
	* @param string $input_text several words separated by spaces to match for each of them.
	*
	*/
	public function tokenize($input_text) {
	
		if(empty($this->settings))
			throw new Exception('settings is empty, probably a json error');
			
		$text_without_properties="";
		
		$result =  array(
			"status" => "success",
			"original" => $input_text,
			"keywords" => $text_without_properties,
			"properties" =>
			array(
				"color"  => array(),
				"gender" => array(),
				"pattern"=> array(),
				"brand"  => array()
			)
		);
		
		$input_text2=strtolower($input_text);
		
		$input_text2=preg_replace_callback($this->colorsregexp, function ($match)  use (&$result){
			$result["properties"]["color"][]=$match[1];
			return "";
		},  $input_text2);
			
		$input_text2=preg_replace_callback($this->patternregexp, function ($match)  use (&$result){
			$result["properties"]["pattern"][]=$match[1];
			return "";
		},  $input_text2);
		
		$input_text2=preg_replace_callback($this->brandregexp, function ($match)  use (&$result){
			$result["properties"]["brand"][]=$match[1];
			return "";
		},  $input_text2);
		
		$input_text2=trim(preg_replace("/\\s{2}/"," ",$input_text2));
		
		$word = strtok($input_text2, " ");		
		while ($word !== false) {

			if(in_array (  $word ,$this->settings["gender"], true ))
				$result["properties"]["gender"][]=$word;				
				
			else 
				$text_without_properties .=" ".$word;
		
			$word = strtok(" ");
		}
		$result["keywords"]=substr($text_without_properties,1);
		return $result;
	}
	
	
	
	
	// helper functions

   /**
    * endsWith
	*
    * returns true if a string ends with something
	*
	* @param string $haystack the input text
	* @param string $needle string to search in in put text
	* @param string $case require case sensitive match
	*
	*/
	private function endsWith($haystack,$needle,$case=true)
	{
		$expectedPosition = strlen($haystack) - strlen($needle);

		if ($case)
			return strrpos($haystack, $needle, 0) === $expectedPosition;

		return strripos($haystack, $needle, 0) === $expectedPosition;
	}
	
	//private function startsWith($haystack,$needle,$case=true)
	//{
	//	if ($case)
	//		return strpos($haystack, $needle, 0) === 0;
    //
	//	return stripos($haystack, $needle, 0) === 0;
	//}
	
  /**
    * sort function to sort by string length desc
	*
	* @param string $a
	* @param string $b
	*
	*/

	private function lengthsort($a,$b){ return strlen($b)-strlen($a); }
	
   /**
    * permutations
	*
    * permutations generator function (not useful. the resulting array takes too much memory)
	*
	* example:
	* <pre><code>
	* $words=array( "1", "2", "3");
	* if(sizeof($words)>1)
	* {
	*	foreach ($this->permutations($words) as $permutation) // permutations take a lot of memory 
	*	echo join(' ',$permutation);	
	* }
	* </code></pre>
	* 
	* @param array $elements
	*
	*/

	private function permutations(array $elements)
	{
		if (count($elements) <= 1) {
			yield $elements;
		} else {
			foreach ($this->permutations(array_slice($elements, 1)) as $permutation) {
				foreach (range(0, count($elements) - 1) as $i) {
					yield array_merge(
						array_slice($permutation, 0, $i),
						[$elements[0]],
						array_slice($permutation, $i)
					);
				}
			}
		}
	}

	
}
